// Jenkinsfile for Nationalparks
def GUID="${env.GUID}"
def CLUSTER="${env.CLUSTER}"
def REPO="${env.REPO}"
def appName="nationalparks"
def appDispName="National Parks"
def appDir="Nationalparks"

podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-maven-appdev:v3.9",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"


    stage('Checkout Source') {
      git url: 'https://github.com/hisasue/ocp_advdev'
    }

    dir(appDir){
      sh "sed s/%%GUID%%/${GUID}/g ../nexus_settings.xml > ./nexus_settings.xml"
      def groupId    = getGroupIdFromPom("pom.xml")
      def artifactId = getArtifactIdFromPom("pom.xml")
      def version    = getVersionFromPom("pom.xml")
      // Set the tag for the development image: version + build number
      def devTag  = "${version}-${BUILD_NUMBER}"
      // Set the tag for the production image: version
      def prodTag = "${version}"
      def mvnCmd = "mvn -s ./nexus_settings.xml"

      stage('Build jar') {
        echo "Building version ${devTag}"
        sh "${mvnCmd} clean package -DskipTests=true"
        //sh "${mvnCmd} clean package -Dmaven.test.skip=true"
      }

      //TODO: uncomment before submit
      //stage('Unit Tests') {
      //  echo "Running Unit Tests"
      //  sh "${mvnCmd} test"
      //}

      //TODO: uncomment before submit
      //stage('Code Analysis') {
      //  echo "Running Code Analysis"
      //  sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-${GUID}-sonarqube.apps.${CLUSTER}/ -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
      //}

      // Publish the built jar file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"
        sh "${mvnCmd} deploy -DaltDeploymentRepository=nexus::default::http://nexus3.${GUID}-nexus.svc.cluster.local:8081/repository/releases"
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"
        sh "oc start-build ${appName} --follow --from-file=./target/${appName}.jar -n ${GUID}-parks-dev"

        // OR use the file you just published into Nexus:
        // sh "oc start-build tasks --follow --from-file=http://nexus3.xyz-nexus.svc.cluster.local:8081/repository/releases/org/jboss/quickstarts/eap/tasks/${version}/tasks-${version}.war -n xyz-tasks-dev"

        // Tag the image using the devTag
        openshiftTag alias: 'false', destStream: appName, destTag: devTag, destinationNamespace: "${GUID}-parks-dev", namespace: "${GUID}-parks-dev", srcStream: appName, srcTag: 'latest', verbose: 'false'
      }

      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"
        def appNameDev = "${appDispName} (Dev)"
        // Update the Image on the Development Deployment Config
        sh "oc set image dc/${appName} ${appName}=docker-registry.default.svc:5000/${GUID}-parks-dev/${appName}:${devTag} -n ${GUID}-parks-dev"
        sh "oc set env dc/${appName} APPNAME='${appNameDev}' DB_HOST=mongodb DB_PORT=27017 DB_USERNAME=mongodb DB_PASSWORD=mongodb DB_NAME=parks DB_REPLICASET=rs0 -n ${GUID}-parks-dev" 
        
        // Deploy the development application.
        openshiftDeploy depCfg: appName, namespace: "${GUID}-parks-dev", verbose: 'false', waitTime: '', waitUnit: 'sec'
        openshiftVerifyDeployment depCfg: appName, namespace: "${GUID}-parks-dev", replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
        openshiftVerifyService namespace: "${GUID}-parks-dev", svcName: appName, verbose: 'false'
      }

      stage('Integration Tests') {
        echo "Running Integration Tests"
      }

      // Copy Image to Nexus Docker Registry
      stage('Copy Image to Nexus Docker Registry') {
        echo "Copy image to Nexus Docker Registry"
        sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/${GUID}-parks-dev/${appName}:${devTag} docker://nexus-registry.${GUID}-nexus.svc.cluster.local:5000/${appName}:${devTag}"

        // Tag the built image with the production tag.
        openshiftTag alias: 'false', destStream: appName, destTag: prodTag, destinationNamespace: "${GUID}-parks-prod", namespace: "${GUID}-parks-dev", srcStream: appName, srcTag: devTag, verbose: 'false'
      }

      // Blue/Green Deployment into Production
      def destApp   = "${appName}-green"
      def activeApp = ""
      def appname_prod = "${appDispName} (Green)"

      stage('Blue/Green Production Deployment') {
        activeApp = sh(returnStdout: true, script: "oc get route ${appName} -n ${GUID}-parks-prod -o jsonpath='{ .spec.to.name }'").trim()
        if (activeApp == "${appName}-green") {
          destApp = "${appName}-blue"
          appname_prod ="${appDispName} (Blue)"
        }
        echo "Active Application:      " + activeApp
        echo "Destination Application: " + destApp

        // Update the Image on the Production Deployment Config
        sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/${GUID}-parks-prod/${appName}:${prodTag} -n ${GUID}-parks-prod"
        sh "oc set env dc/${destApp} APPNAME=\"${appname_prod}\" DB_HOST=mongodb DB_PORT=27017 DB_USERNAME=mongodb DB_PASSWORD=mongodb DB_NAME=parks DB_REPLICASET=rs0 -n ${GUID}-parks-prod"

        //sh "oc delete configmap ${destApp}-config -n ${GUID}-parks-prod --ignore-not-found=true"
        //sh "oc create configmap ${destApp}-config --from-file=./configuration/application-users.properties --from-file=./configuration/application-roles.properties -n ${GUID}-parks-prod"

        // Deploy the inactive application.
        openshiftDeploy depCfg: destApp, namespace: "${GUID}-parks-prod", verbose: 'false', waitTime: '', waitUnit: 'sec'
        openshiftVerifyDeployment depCfg: destApp, namespace: "${GUID}-parks-prod", replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
        openshiftVerifyService namespace: "${GUID}-parks-prod", svcName: destApp, verbose: 'false'
      }

      stage('Switch over to new Version') {
        //input "Switch Production?"

        echo "Switching Production application to ${destApp}."
        sh "oc patch route ${appName} -n ${GUID}-parks-prod -p '{\"spec\":{\"to\":{\"name\":\"" + destApp + "\"}}}\'"
      }
    }
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
